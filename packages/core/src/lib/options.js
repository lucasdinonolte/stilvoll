import { z } from 'zod';

const configSchema = z
  .object({
    input: z.array(z.string()),
    output: z.string(),
    classNameMap: z.string().nullable(),
    useImportant: z.boolean(),
    banner: z.string().nullable(),
  })
  .passthrough();

export const defaultOptions = {
  input: [],
  output: null,
  classNameMap: null,
  useImportant: false,
  banner: '/* AUTOGENERATED, DO NOT EDIT DIRECTLY */',
  utilities: {
    space: {
      customPropertyRegex: /^--space-/,
      utilities: {
        m: ['margin'],
        p: ['padding'],
        mx: ['margin-left', 'margin-right'],
        my: ['margin-top', 'margin-bottom'],
        px: ['padding-left', 'padding-right'],
        py: ['padding-top', 'padding-bottom'],
        mt: ['margin-top'],
        mr: ['margin-right'],
        mb: ['margin-bottom'],
        ml: ['margin-left'],
        pt: ['padding-top'],
        pr: ['padding-right'],
        pb: ['padding-bottom'],
        pl: ['padding-left'],
        gap: ['gap'],
        stack: ({ className, value }) => ({
          selector: `.${className} > :not([hidden]) ~ :not([hidden])`,
          properties: [['margin-top', value]],
        }),
      },
    },
    background: {
      customPropertyRegex: /^--color-/,
      utilities: {
        background: ['background-color'],
      },
    },
    color: {
      customPropertyRegex: /^--color-/,
      utilities: {
        color: ['color'],
      },
    },
  },
  staticUtilities: {
    text: {
      items: { left: 'left', right: 'right', center: 'center' },
      properties: ['text-align'],
    },
  },
};

const mergeWithDefaultConfig = (config = {}) =>
  Object.assign({}, defaultOptions, config);

export const validateConfig = (config) =>
  configSchema.parse(mergeWithDefaultConfig(config));
